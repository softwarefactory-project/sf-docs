.. _elk-operator:

ELK service
===========

Software Factory bundles an ELK stack based on :ref:`Opendistro for Elasticsearch <opendistro>`
to ease searching through the logs artifacts of jobs. Once activated,
the console log of every build is exported through logstash and
then searchable via Kibana.

A Software Factory user might want to export more artifacts
than the job's console. Indeed a job may generate additional
log files. In that case a custom zuul *post-run* job must be defined.
In order to do so a user must refer to :ref:`Export logs artifacts to logstash <zuul-artifacts-export-logstash>`

How to activate
---------------

These services are not deployed by default but can be activated by adding
the following components in */etc/software-factory/arch.yaml*:

.. code-block:: yaml

 - elasticsearch
 - logstash
 - job-logs-gearman-client
 - job-logs-gearman-worker
 - kibana

Then running:

.. code-block:: bash

 # sfconfig

The Kibana interface should be accessible via the Software Factory top menu under
the name Kibana.


Manual actions after installing Software Factory
------------------------------------------------

Use `admin` user on first login to the Kibana service. The password for that user
is set as a `elasticsearch_password` entry in `secrets.yaml file`.
You can also use below command:

.. code-block:: bash

   awk '/elasticsearch_password/ {print $2}' /var/lib/software-factory/bootstrap-data/secrets.yaml

.. note::

   This section is at the top of the document, because it has very important
   information. In Software Factory below 3.6, the sfconfig utility was restoring
   index-pattern Kibana objects, which are associated to `logstash-*` indexes,
   so a user does not need to configure anything after installation.
   Normally, this index-pattern should not exist in Kibana, because it
   can't be associated to the index, that does not exist. In that case,
   after the first CI job execution, that sends the informations to the Elasticsearch,
   the `logstash-*` index will be created so a user with admin privileges
   should create an index-pattern manually.

   Also with RBAC control,a `kibana` user (which has read-only access) is not
   able to create additional data into the `.kibana` index, *so it is required
   to login as an admin and go to the section "Discover" in Kibana menu*.
   For now, the `kibana` user has temporary permissions to create such data, but
   it will be removed in the next release of Software Factory.


Managing internal users
-----------------------

There are few users created in Elasticsearch in Software Factory.
The full list of available users `is in this :ref:`chapter <el_users>`

Users information are stored in `internal_users.yml` file which is
located in `opendistro_security config directory`:

.. code-block::

   /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/

For each user, password has been generated by sfconfig tool.
Not encrypted passwords are stored in:

.. code-block::

   /var/lib/software-factory/bootstrap-data/secrets.yaml

More information about the file, you can find `here`_.

.. _`here`: https://opendistro.github.io/for-elasticsearch-docs/docs/security/configuration/yaml/#internal_usersyml

.. _el_users:

Available users
---------------

There are few users created  in Software Factory 3.6 for Elasticsearch:

- admin - the superuser in Kibana. It has all permissions to manage the Kibana and Elasticsearch cluster
- kibanaserver - this user is used by Kibana service to connect to the Elasticsearch
- logstash - dedicated user to communicate logstash service to the Elasticsearch
- repoxplorer - user that is used by RepoXplorer to connect to the ES cluster
- curator - user that is used by curator service to 'clean-up' the index
- kibana - a read-only user. This user shows on the login page

For each user, password has been generated by sfconfig tool. You can find
them in:

.. code-block::

   /var/lib/software-factory/bootstrap-data/secrets.yaml


Resetting password
------------------

The best way to change the user password is to change it in the
`secrets.yaml` file and re-run sfconfig tool.

To do that without the sfconfig tool, you need to generate it by using this
script:

.. code-block:: bash

   /usr/share/elasticsearch/plugins/opendistro_security/tools/hash.sh -p <MY PASSWORD>

The generated hash should be added into the `internal_users.yml` file as the
"hash" property for the user in `opendistro_security config directory`.

.. note::

   To apply that change, you need to run `securityadmin.sh` script.
   Don't forget to put unencrypted password into the `secrets.yaml`
   file before executing sfconfig tool!


Securityadmin.sh script
-----------------------

To apply created changes, you need to execute the `dedicated script`_ script.
It is the most important step that you should not forget after doing some
changes.

In the Software Factory 3.6, the command below will setup the `securityadmin.sh`
script. What you need to do is to execute it on the Elasticsearch host.

.. code-block:: bash

   /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh   \
     -cd /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/  \
     -icl -nhnv -cacert /etc/elasticsearch/certs/localCA.pem  \
     -cert /etc/elasticsearch/certs/elasticsearch-admin.crt  \
     -key /etc/elasticsearch/certs/elasticsearch-admin.key    \
     -h $(hostname)

.. _`dedicated script`: https://opendistro.github.io/for-elasticsearch-docs/docs/security/configuration/generate-certificates/#run-securityadminsh


Tenants
-------

Software Factory 3.6 is only configuring one tenant: `global` and
it also disable multi-tenancy (check Kibana configuration file).


Default Opendistro settings
---------------------------

By default Opendistro is running the `install_demo_configuration.sh` script
on installing the package. The script is creating default environment,
configuration for Kibana and Elasticsearch service (also generating the
self-signed certificates).
It is recommended to disable the demo configuration on production
environment (like we do in Software Factory).


Manage indices
--------------

Query the list and usage of index using:

.. code-block:: bash

   curl http://elasticsearch:9200/_cat/indices?v


Delete old/unused index using:

.. code-block:: bash

   curl -X DELETE http://elasticsearch:9200/INDEX-NAME
.. _opendistro:
